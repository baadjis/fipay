// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transanction.proto

/*
Package transaction is a generated protocol buffer package.

It is generated from these files:
	transanction.proto

It has these top-level messages:
	Customer
	Details
	Transaction
	CustomerResponse
	DetailsResponse
	Error
	CustomerTransactions
	TransactionResponse
	AgentTransactions
	CustomerFilter
	TransactionFilter
	AgentFilter
	Empty
*/
package transaction

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Customer struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Fullname string `protobuf:"bytes,2,opt,name=fullname" json:"fullname,omitempty"`
	Country  string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Phone    string `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Customer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Customer) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *Customer) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type Details struct {
	SentAmount       float32 `protobuf:"fixed32,1,opt,name=sentAmount" json:"sentAmount,omitempty"`
	SentCurrency     string  `protobuf:"bytes,2,opt,name=sentCurrency" json:"sentCurrency,omitempty"`
	ReceivedAmount   float32 `protobuf:"fixed32,3,opt,name=receivedAmount" json:"receivedAmount,omitempty"`
	ReceivedCurrency string  `protobuf:"bytes,4,opt,name=receivedCurrency" json:"receivedCurrency,omitempty"`
	PayemenMode      string  `protobuf:"bytes,5,opt,name=payemenMode" json:"payemenMode,omitempty"`
	ReceptionMode    string  `protobuf:"bytes,6,opt,name=receptionMode" json:"receptionMode,omitempty"`
	Xchange          string  `protobuf:"bytes,7,opt,name=xchange" json:"xchange,omitempty"`
	Fees             string  `protobuf:"bytes,8,opt,name=fees" json:"fees,omitempty"`
}

func (m *Details) Reset()                    { *m = Details{} }
func (m *Details) String() string            { return proto.CompactTextString(m) }
func (*Details) ProtoMessage()               {}
func (*Details) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Details) GetSentAmount() float32 {
	if m != nil {
		return m.SentAmount
	}
	return 0
}

func (m *Details) GetSentCurrency() string {
	if m != nil {
		return m.SentCurrency
	}
	return ""
}

func (m *Details) GetReceivedAmount() float32 {
	if m != nil {
		return m.ReceivedAmount
	}
	return 0
}

func (m *Details) GetReceivedCurrency() string {
	if m != nil {
		return m.ReceivedCurrency
	}
	return ""
}

func (m *Details) GetPayemenMode() string {
	if m != nil {
		return m.PayemenMode
	}
	return ""
}

func (m *Details) GetReceptionMode() string {
	if m != nil {
		return m.ReceptionMode
	}
	return ""
}

func (m *Details) GetXchange() string {
	if m != nil {
		return m.Xchange
	}
	return ""
}

func (m *Details) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

type Transaction struct {
	Txcode            string   `protobuf:"bytes,1,opt,name=txcode" json:"txcode,omitempty"`
	SendAgenceId      string   `protobuf:"bytes,2,opt,name=sendAgenceId" json:"sendAgenceId,omitempty"`
	ReceptionAgenceId string   `protobuf:"bytes,3,opt,name=receptionAgenceId" json:"receptionAgenceId,omitempty"`
	SenderId          string   `protobuf:"bytes,4,opt,name=senderId" json:"senderId,omitempty"`
	ReceiverId        string   `protobuf:"bytes,5,opt,name=receiverId" json:"receiverId,omitempty"`
	Details           *Details `protobuf:"bytes,6,opt,name=details" json:"details,omitempty"`
	Status            string   `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetTxcode() string {
	if m != nil {
		return m.Txcode
	}
	return ""
}

func (m *Transaction) GetSendAgenceId() string {
	if m != nil {
		return m.SendAgenceId
	}
	return ""
}

func (m *Transaction) GetReceptionAgenceId() string {
	if m != nil {
		return m.ReceptionAgenceId
	}
	return ""
}

func (m *Transaction) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *Transaction) GetReceiverId() string {
	if m != nil {
		return m.ReceiverId
	}
	return ""
}

func (m *Transaction) GetDetails() *Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Transaction) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type CustomerResponse struct {
	Customer *Customer `protobuf:"bytes,1,opt,name=customer" json:"customer,omitempty"`
	Error    *Error    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CustomerResponse) Reset()                    { *m = CustomerResponse{} }
func (m *CustomerResponse) String() string            { return proto.CompactTextString(m) }
func (*CustomerResponse) ProtoMessage()               {}
func (*CustomerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CustomerResponse) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *CustomerResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DetailsResponse struct {
	Details *Details `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	Error   *Error   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *DetailsResponse) Reset()                    { *m = DetailsResponse{} }
func (m *DetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*DetailsResponse) ProtoMessage()               {}
func (*DetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DetailsResponse) GetDetails() *Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *DetailsResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CustomerTransactions struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *CustomerTransactions) Reset()                    { *m = CustomerTransactions{} }
func (m *CustomerTransactions) String() string            { return proto.CompactTextString(m) }
func (*CustomerTransactions) ProtoMessage()               {}
func (*CustomerTransactions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CustomerTransactions) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type TransactionResponse struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	Error       *Error       `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *TransactionResponse) Reset()                    { *m = TransactionResponse{} }
func (m *TransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*TransactionResponse) ProtoMessage()               {}
func (*TransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TransactionResponse) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type AgentTransactions struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *AgentTransactions) Reset()                    { *m = AgentTransactions{} }
func (m *AgentTransactions) String() string            { return proto.CompactTextString(m) }
func (*AgentTransactions) ProtoMessage()               {}
func (*AgentTransactions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AgentTransactions) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type CustomerFilter struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CustomerFilter) Reset()                    { *m = CustomerFilter{} }
func (m *CustomerFilter) String() string            { return proto.CompactTextString(m) }
func (*CustomerFilter) ProtoMessage()               {}
func (*CustomerFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CustomerFilter) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TransactionFilter struct {
	Txcode string `protobuf:"bytes,1,opt,name=txcode" json:"txcode,omitempty"`
}

func (m *TransactionFilter) Reset()                    { *m = TransactionFilter{} }
func (m *TransactionFilter) String() string            { return proto.CompactTextString(m) }
func (*TransactionFilter) ProtoMessage()               {}
func (*TransactionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TransactionFilter) GetTxcode() string {
	if m != nil {
		return m.Txcode
	}
	return ""
}

type AgentFilter struct {
	AgentId string `protobuf:"bytes,1,opt,name=AgentId,json=agentId" json:"AgentId,omitempty"`
}

func (m *AgentFilter) Reset()                    { *m = AgentFilter{} }
func (m *AgentFilter) String() string            { return proto.CompactTextString(m) }
func (*AgentFilter) ProtoMessage()               {}
func (*AgentFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AgentFilter) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto.RegisterType((*Customer)(nil), "transaction.Customer")
	proto.RegisterType((*Details)(nil), "transaction.Details")
	proto.RegisterType((*Transaction)(nil), "transaction.Transaction")
	proto.RegisterType((*CustomerResponse)(nil), "transaction.CustomerResponse")
	proto.RegisterType((*DetailsResponse)(nil), "transaction.DetailsResponse")
	proto.RegisterType((*Error)(nil), "transaction.Error")
	proto.RegisterType((*CustomerTransactions)(nil), "transaction.CustomerTransactions")
	proto.RegisterType((*TransactionResponse)(nil), "transaction.TransactionResponse")
	proto.RegisterType((*AgentTransactions)(nil), "transaction.AgentTransactions")
	proto.RegisterType((*CustomerFilter)(nil), "transaction.CustomerFilter")
	proto.RegisterType((*TransactionFilter)(nil), "transaction.TransactionFilter")
	proto.RegisterType((*AgentFilter)(nil), "transaction.AgentFilter")
	proto.RegisterType((*Empty)(nil), "transaction.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TransactionService service

type TransactionServiceClient interface {
	AddTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetTransaction(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (TransactionService_GetTransactionClient, error)
	AddCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error)
	GetCustomer(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (TransactionService_GetCustomerClient, error)
	GetCustomerTransactions(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (*CustomerTransactions, error)
	GetAgentTransactions(ctx context.Context, in *AgentFilter, opts ...grpc.CallOption) (TransactionService_GetAgentTransactionsClient, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) AddTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := grpc.Invoke(ctx, "/transaction.TransactionService/AddTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransaction(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (TransactionService_GetTransactionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TransactionService_serviceDesc.Streams[0], c.cc, "/transaction.TransactionService/GetTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceGetTransactionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_GetTransactionClient interface {
	Recv() (*TransactionResponse, error)
	grpc.ClientStream
}

type transactionServiceGetTransactionClient struct {
	grpc.ClientStream
}

func (x *transactionServiceGetTransactionClient) Recv() (*TransactionResponse, error) {
	m := new(TransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) AddCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := grpc.Invoke(ctx, "/transaction.TransactionService/AddCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetCustomer(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (TransactionService_GetCustomerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TransactionService_serviceDesc.Streams[1], c.cc, "/transaction.TransactionService/GetCustomer", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceGetCustomerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_GetCustomerClient interface {
	Recv() (*Customer, error)
	grpc.ClientStream
}

type transactionServiceGetCustomerClient struct {
	grpc.ClientStream
}

func (x *transactionServiceGetCustomerClient) Recv() (*Customer, error) {
	m := new(Customer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) GetCustomerTransactions(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (*CustomerTransactions, error) {
	out := new(CustomerTransactions)
	err := grpc.Invoke(ctx, "/transaction.TransactionService/GetCustomerTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetAgentTransactions(ctx context.Context, in *AgentFilter, opts ...grpc.CallOption) (TransactionService_GetAgentTransactionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TransactionService_serviceDesc.Streams[2], c.cc, "/transaction.TransactionService/GetAgentTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceGetAgentTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_GetAgentTransactionsClient interface {
	Recv() (*AgentTransactions, error)
	grpc.ClientStream
}

type transactionServiceGetAgentTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionServiceGetAgentTransactionsClient) Recv() (*AgentTransactions, error) {
	m := new(AgentTransactions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TransactionService service

type TransactionServiceServer interface {
	AddTransaction(context.Context, *Transaction) (*TransactionResponse, error)
	GetTransaction(*TransactionFilter, TransactionService_GetTransactionServer) error
	AddCustomer(context.Context, *Customer) (*CustomerResponse, error)
	GetCustomer(*CustomerFilter, TransactionService_GetCustomerServer) error
	GetCustomerTransactions(context.Context, *CustomerFilter) (*CustomerTransactions, error)
	GetAgentTransactions(*AgentFilter, TransactionService_GetAgentTransactionsServer) error
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).AddTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransaction(m, &transactionServiceGetTransactionServer{stream})
}

type TransactionService_GetTransactionServer interface {
	Send(*TransactionResponse) error
	grpc.ServerStream
}

type transactionServiceGetTransactionServer struct {
	grpc.ServerStream
}

func (x *transactionServiceGetTransactionServer) Send(m *TransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_AddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).AddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/AddCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).AddCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetCustomer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CustomerFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetCustomer(m, &transactionServiceGetCustomerServer{stream})
}

type TransactionService_GetCustomerServer interface {
	Send(*Customer) error
	grpc.ServerStream
}

type transactionServiceGetCustomerServer struct {
	grpc.ServerStream
}

func (x *transactionServiceGetCustomerServer) Send(m *Customer) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_GetCustomerTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetCustomerTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/GetCustomerTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetCustomerTransactions(ctx, req.(*CustomerFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetAgentTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetAgentTransactions(m, &transactionServiceGetAgentTransactionsServer{stream})
}

type TransactionService_GetAgentTransactionsServer interface {
	Send(*AgentTransactions) error
	grpc.ServerStream
}

type transactionServiceGetAgentTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionServiceGetAgentTransactionsServer) Send(m *AgentTransactions) error {
	return x.ServerStream.SendMsg(m)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTransaction",
			Handler:    _TransactionService_AddTransaction_Handler,
		},
		{
			MethodName: "AddCustomer",
			Handler:    _TransactionService_AddCustomer_Handler,
		},
		{
			MethodName: "GetCustomerTransactions",
			Handler:    _TransactionService_GetCustomerTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransaction",
			Handler:       _TransactionService_GetTransaction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCustomer",
			Handler:       _TransactionService_GetCustomer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAgentTransactions",
			Handler:       _TransactionService_GetAgentTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transanction.proto",
}

func init() { proto.RegisterFile("transanction.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xad, 0x93, 0xa6, 0xc9, 0x6f, 0xdc, 0x5f, 0x68, 0x87, 0x00, 0x56, 0x10, 0x55, 0xba, 0x42,
	0x10, 0x01, 0x8a, 0x4a, 0xb8, 0x21, 0x2e, 0x51, 0x09, 0x55, 0x0f, 0x20, 0x61, 0x2a, 0x2e, 0x9c,
	0x8c, 0x77, 0xda, 0x5a, 0xc4, 0x7f, 0x64, 0x6f, 0xaa, 0x46, 0xf0, 0x3d, 0xf8, 0xb0, 0x08, 0x09,
	0xed, 0x7a, 0xd7, 0x5d, 0x93, 0x04, 0x05, 0x89, 0x5b, 0xe6, 0xed, 0x9b, 0xb7, 0x33, 0x6f, 0x66,
	0x1d, 0x40, 0x91, 0x07, 0x49, 0x11, 0x24, 0xa1, 0x88, 0xd2, 0x64, 0x94, 0xe5, 0xa9, 0x48, 0xd1,
	0x2d, 0x31, 0x05, 0xb1, 0x6f, 0xd0, 0x39, 0x9e, 0x17, 0x22, 0x8d, 0x29, 0xc7, 0x2e, 0x34, 0x22,
	0xee, 0x39, 0x03, 0x67, 0xd8, 0xf2, 0x1b, 0x11, 0xc7, 0x3e, 0x74, 0xce, 0xe7, 0xb3, 0x59, 0x12,
	0xc4, 0xe4, 0x35, 0x06, 0xce, 0xf0, 0x3f, 0xbf, 0x8a, 0xd1, 0x83, 0x76, 0x98, 0xce, 0x13, 0x91,
	0x2f, 0xbc, 0xa6, 0x3a, 0x32, 0x21, 0xf6, 0xa0, 0x45, 0x71, 0x10, 0xcd, 0xbc, 0x6d, 0x85, 0x97,
	0x81, 0x44, 0xb3, 0xcb, 0x34, 0x21, 0xaf, 0x55, 0xa2, 0x2a, 0x60, 0xdf, 0x1b, 0xd0, 0x7e, 0x4d,
	0x22, 0x88, 0x66, 0x05, 0x1e, 0x00, 0x14, 0x94, 0x88, 0x49, 0x2c, 0x75, 0x54, 0x15, 0x0d, 0xdf,
	0x42, 0x90, 0xc1, 0xae, 0x8c, 0x8e, 0xe7, 0x79, 0x4e, 0x49, 0xb8, 0xd0, 0x15, 0xd5, 0x30, 0x7c,
	0x04, 0xdd, 0x9c, 0x42, 0x8a, 0xae, 0x88, 0x6b, 0x9d, 0xa6, 0xd2, 0xf9, 0x0d, 0xc5, 0x27, 0xb0,
	0x67, 0x90, 0x4a, 0xaf, 0x2c, 0x77, 0x09, 0xc7, 0x01, 0xb8, 0x59, 0xb0, 0xa0, 0x98, 0x92, 0xb7,
	0x29, 0x37, 0xf5, 0xdb, 0x10, 0x3e, 0x84, 0xff, 0x65, 0x56, 0x26, 0x0d, 0x55, 0x9c, 0x1d, 0xc5,
	0xa9, 0x83, 0xd2, 0xb1, 0xeb, 0xf0, 0x32, 0x48, 0x2e, 0xc8, 0x6b, 0x97, 0x8e, 0xe9, 0x10, 0x11,
	0xb6, 0xcf, 0x89, 0x0a, 0xaf, 0xa3, 0x60, 0xf5, 0x9b, 0xfd, 0x70, 0xc0, 0x3d, 0xbb, 0x99, 0x13,
	0xde, 0x85, 0x1d, 0x71, 0x1d, 0x4a, 0x71, 0x47, 0xb1, 0x74, 0xa4, 0x5d, 0xe1, 0x93, 0x0b, 0x4a,
	0x42, 0x3a, 0xe5, 0x96, 0x2b, 0x15, 0x86, 0xcf, 0x60, 0xbf, 0x2a, 0xa5, 0x22, 0x96, 0x53, 0x5b,
	0x3e, 0x90, 0x53, 0x97, 0xd9, 0x94, 0x9f, 0x72, 0xed, 0x49, 0x15, 0xcb, 0x19, 0x69, 0x7f, 0xe4,
	0x69, 0x69, 0x85, 0x85, 0xe0, 0x08, 0xda, 0xbc, 0x1c, 0xa7, 0xf2, 0xc0, 0x1d, 0xf7, 0x46, 0xd6,
	0xb2, 0x8d, 0xf4, 0xa8, 0x7d, 0x43, 0x92, 0x5d, 0x15, 0x22, 0x10, 0xf3, 0x42, 0x5b, 0xa2, 0x23,
	0x96, 0xc2, 0x9e, 0xd9, 0x4a, 0x9f, 0x8a, 0x2c, 0x4d, 0x0a, 0xc2, 0xe7, 0xd0, 0x09, 0x35, 0xa6,
	0x3c, 0x70, 0xc7, 0x77, 0x6a, 0xe2, 0x55, 0x42, 0x45, 0xc3, 0x21, 0xb4, 0x28, 0xcf, 0xd3, 0x5c,
	0xb9, 0xe2, 0x8e, 0xb1, 0xc6, 0x9f, 0xca, 0x13, 0xbf, 0x24, 0xb0, 0x2f, 0x70, 0xcb, 0x14, 0x67,
	0xee, 0xb3, 0x7a, 0x71, 0x36, 0xe9, 0x65, 0xf3, 0xcb, 0x0e, 0xa1, 0xa5, 0x62, 0xb9, 0x12, 0x31,
	0x15, 0x45, 0x70, 0x61, 0xa6, 0x6a, 0x42, 0x76, 0x06, 0x3d, 0xd3, 0x8f, 0xb5, 0x05, 0x05, 0xbe,
	0x82, 0x5d, 0x4b, 0x56, 0x56, 0xd6, 0x1c, 0xba, 0x63, 0xaf, 0x76, 0x97, 0x95, 0xe0, 0xd7, 0xd8,
	0xec, 0x2b, 0xdc, 0xb6, 0x0f, 0x4d, 0xa7, 0x2f, 0xc1, 0xfe, 0x24, 0xe8, 0x6e, 0xd7, 0x6b, 0xda,
	0xe4, 0xbf, 0xe8, 0xfa, 0x3d, 0xec, 0xcb, 0x1d, 0x13, 0xff, 0xb0, 0x9f, 0x01, 0x74, 0x8d, 0x4b,
	0x6f, 0xa2, 0x99, 0x58, 0xfe, 0x84, 0xb1, 0xa7, 0xb0, 0x6f, 0xa5, 0x6b, 0xd2, 0x9a, 0xb7, 0xc4,
	0x1e, 0x83, 0xab, 0x2a, 0xd4, 0x34, 0x0f, 0xda, 0x2a, 0x3c, 0xe5, 0x66, 0x3a, 0x41, 0x19, 0xb2,
	0x36, 0xb4, 0xa6, 0x71, 0x26, 0x16, 0xe3, 0x9f, 0x4d, 0x40, 0x4b, 0xff, 0x03, 0xe5, 0x57, 0x51,
	0x48, 0xf8, 0x0e, 0xba, 0x13, 0xce, 0xed, 0xe7, 0xbb, 0xb6, 0xa3, 0xfe, 0x60, 0x6d, 0xaf, 0x7a,
	0x3c, 0x6c, 0x0b, 0x3f, 0x42, 0xf7, 0x84, 0x6c, 0xe3, 0xf0, 0x60, 0x5d, 0x56, 0x59, 0xfb, 0x26,
	0xaa, 0x47, 0x0e, 0x4e, 0xc1, 0x9d, 0x70, 0x5e, 0x7d, 0xff, 0x57, 0xbf, 0xa7, 0xfe, 0x83, 0xd5,
	0xcf, 0xec, 0xa6, 0xbc, 0x29, 0xb8, 0x27, 0x24, 0x2a, 0x99, 0xfb, 0x2b, 0xf9, 0xba, 0xb0, 0xd5,
	0x77, 0xa8, 0x6a, 0x3e, 0xc1, 0x3d, 0x4b, 0xa6, 0xb6, 0x26, 0x7f, 0x94, 0x3c, 0x5c, 0x79, 0x68,
	0xe7, 0xb3, 0x2d, 0x3c, 0x83, 0xde, 0x09, 0x89, 0xe5, 0x05, 0xac, 0x0f, 0xc6, 0x1a, 0x7f, 0xff,
	0x60, 0xf9, 0xa4, 0xae, 0x79, 0xe4, 0x7c, 0xde, 0x51, 0xff, 0xa8, 0x2f, 0x7e, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x00, 0xea, 0x28, 0x87, 0x67, 0x07, 0x00, 0x00,
}
